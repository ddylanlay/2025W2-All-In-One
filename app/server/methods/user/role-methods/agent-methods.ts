import { Meteor } from "meteor/meteor";
import { Mongo } from "meteor/mongo";
import { AgentDocument } from "../../../database/user/models/role-models/AgentDocument";
import { MeteorMethodIdentifier } from "/app/shared/meteor-method-identifier";
import { AgentCollection } from "/app/server/database/user/user-collections";
import { ApiAgent } from "../../../../shared/api-models/user/api-roles/ApiAgent";
import { meteorWrappedInvalidDataError } from "/app/server/utils/error-utils";
import { InvalidDataError } from "/app/server/errors/InvalidDataError";
import { TaskDocument } from "/app/server/database/task/models/TaskDocument";
import { TaskCollection } from "/app/server/database/task/task-collections";

// -- INSERT AGENT --

//Need to check this, should we be adding something for the tasks here?
const agentInsertMethod = {
  [MeteorMethodIdentifier.AGENT_INSERT]: async (
    data: Omit<AgentDocument, "createdAt" | "_id"> // omitting both id and createdat to be generated by the db
  ): Promise<string> => {
    const newAgent: Mongo.OptionalId<AgentDocument> = {
      ...data,
      createdAt: new Date(),
    };

    return await AgentCollection.insertAsync(newAgent);
  },
};

// -- GET AGENT --
const agentGetMethod = {
  [MeteorMethodIdentifier.AGENT_GET]: async (
    userId: string
  ): Promise<ApiAgent> => {
    const agentDoc = await AgentCollection.findOneAsync({
      userAccountId: userId,
    });

    if (!agentDoc) {
      throw meteorWrappedInvalidDataError(
        new InvalidDataError(`Agent with user ID ${userId} not found.`)
      );
    }
    

    return {
      agentId: agentDoc._id!,
      userAccountId: agentDoc.userAccountId,
      tasks: agentDoc.task_ids,
      firstName: agentDoc.firstName,
      lastName: agentDoc.lastName,
      email: agentDoc.email,
      agentCode: agentDoc.agentCode,
      createdAt: agentDoc.createdAt,
    };
  },
};

Meteor.methods({
  ...agentInsertMethod,
  ...agentGetMethod,
});
