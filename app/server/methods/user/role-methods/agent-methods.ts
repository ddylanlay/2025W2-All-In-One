import { Meteor } from "meteor/meteor";
import { Mongo } from "meteor/mongo";
import { AgentDocument } from "../../../database/user/models/role-models/AgentDocument";
import { MeteorMethodIdentifier } from "/app/shared/meteor-method-identifier";
import { AgentCollection } from "/app/server/database/user/user-collections";
import { ApiAgent } from "../../../../shared/api-models/user/api-roles/ApiAgent";
import { meteorWrappedInvalidDataError } from "/app/server/utils/error-utils";
import { InvalidDataError } from "/app/server/errors/InvalidDataError";
import { TaskDocument } from "/app/server/database/task/models/TaskDocument";
import { TaskCollection } from "/app/server/database/task/task-collections";

// -- INSERT AGENT --

//Need to check this, should we be adding something for the tasks here?
const agentInsertMethod = {
  [MeteorMethodIdentifier.AGENT_INSERT]: async (
    data: Omit<AgentDocument,"_id"> // omitting both id and createdat to be generated by the db
  ): Promise<string> => {
    const newAgent: Mongo.OptionalId<AgentDocument> = {
      ...data,
      createdAt: new Date(),
    };

    return await AgentCollection.insertAsync(newAgent);
  },
};

// -- GET AGENT --
const agentGetMethod = {
  [MeteorMethodIdentifier.AGENT_GET]: async (
    userId: string
  ): Promise<ApiAgent> => {
    const agentDoc = await AgentCollection.findOneAsync({
      userAccountId: userId,
    });

    if (!agentDoc) {
      throw meteorWrappedInvalidDataError(
        new InvalidDataError(`Agent with user ID ${userId} not found.`)
      );
    }
    const agentDTO = await mapAgentDocumentToDTO(agentDoc).catch((error) => {
      throw meteorWrappedInvalidDataError(error);
    });
    return agentDTO;
  },
};

// -- UPDATE AGENT TASKS --
const agentUpdateTasksMethod = {
  [MeteorMethodIdentifier.AGENT_UPDATE_TASKS]: async (
    userId: string,
    taskId: string
  ): Promise<void> => {
    const agentDoc = await AgentCollection.findOneAsync({
      userAccountId: userId,
    });

    if (!agentDoc) {
      throw meteorWrappedInvalidDataError(
        new InvalidDataError(`Agent with user ID ${userId} not found.`)
      );
    }

    // Add the task ID to the agent's task_ids array if it doesn't already exist
    const currentTaskIds = agentDoc.task_ids ?? [];
    if (!currentTaskIds.includes(taskId)) {
      const updatedTaskIds = [...currentTaskIds, taskId];
      await AgentCollection.updateAsync(
        { userAccountId: userId },
        { $set: { task_ids: updatedTaskIds } }
      );
    }
  },
};

async function mapAgentDocumentToDTO(agent: AgentDocument): Promise<ApiAgent> {
  const taskIds = agent.task_ids ?? [];

  const taskDocuments =
    taskIds.length > 0 ? await getTaskDocumentsMatchingIds(taskIds) : [];

  return {
    agentId: agent._id!,
    userAccountId: agent.userAccountId,
    tasks: taskDocuments.map((doc) => doc._id),
    agentCode: agent.agentCode,
    createdAt: agent.createdAt,
    profileDataId: agent.profileDataId,
  };
}

async function getTaskDocumentsMatchingIds(
  ids: string[]
): Promise<TaskDocument[]> {
  return await TaskCollection.find({
    _id: { $in: ids },
  }).fetchAsync();
}

Meteor.methods({
  ...agentInsertMethod,
  ...agentGetMethod,
  ...agentUpdateTasksMethod,
});
