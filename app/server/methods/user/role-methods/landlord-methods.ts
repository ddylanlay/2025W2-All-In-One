import { Meteor } from "meteor/meteor";
import { Mongo } from "meteor/mongo";
import { LandlordDocument } from "../../../database/user/models/role-models/LandlordDocument";
import { LandlordCollection } from "/app/server/database/user/user-collections";
import { MeteorMethodIdentifier } from "/app/shared/meteor-method-identifier";
import { meteorWrappedInvalidDataError } from "/app/server/utils/error-utils";
import { InvalidDataError } from "/app/server/errors/InvalidDataError";
import { ApiLandlord } from "../../../../shared/api-models/user/api-roles/ApiLandlord";
import { TaskDocument } from "/app/server/database/task/models/TaskDocument";
import { TaskCollection } from "/app/server/database/task/task-collections";
//INSERT LANDLORD
const landlordInsertMethod = {
  [MeteorMethodIdentifier.LANDLORD_INSERT]: async (
    data: Omit<LandlordDocument, "_id"> // omitting both id and createdat to be generated by the db
  ): Promise<string> => {
    const newLandlord: Mongo.OptionalId<LandlordDocument> = {
      ...data,
      createdAt: new Date(),
    };

    return await LandlordCollection.insertAsync(newLandlord);
  },
};

//GET LANDLORD
// This method is used to get a landlord by its userId
// It returns a promise that resolves to an ApiLandlord object
const landlordGetMethod = {
  [MeteorMethodIdentifier.LANDLORD_GET]: async (
    userId: string
  ): Promise<ApiLandlord> => {
    const landlordDoc = await LandlordCollection.findOneAsync({
      userAccountId: userId,
    });

    if (!landlordDoc) {
      throw meteorWrappedInvalidDataError(
        new InvalidDataError(`Landlord with user ID ${userId} not found.`)
      );
    }

    return mapLandlordDocumentToDTO(landlordDoc);
  },
};

const landlordGetAllMethod = {
  [MeteorMethodIdentifier.LANDLORD_GET_ALL]: async (): Promise<
    ApiLandlord[]
  > => {
    const landlords = await LandlordCollection.find({}).fetchAsync();
    return await Promise.all(landlords.map(mapLandlordDocumentToDTO));
  },
};
async function mapLandlordDocumentToDTO(
  landlord: LandlordDocument
): Promise<ApiLandlord> {
  const taskIds = landlord.task_ids ?? [];

  const taskDocuments =
    taskIds.length > 0 ? await getTaskDocumentsMatchingIds(taskIds) : [];

  return {
    landlordId: landlord._id!,
    profileDataId: landlord.profileDataId,
    userAccountId: landlord.userAccountId,
    tasks: taskDocuments.map((doc) => doc._id),
    createdAt: landlord.createdAt,
  };
}

async function getTaskDocumentsMatchingIds(
  ids: string[]
): Promise<TaskDocument[]> {
  return await TaskCollection.find({
    _id: { $in: ids },
  }).fetchAsync();
}

Meteor.methods({
  ...landlordInsertMethod,
  ...landlordGetMethod,
  ...landlordGetAllMethod,
});
