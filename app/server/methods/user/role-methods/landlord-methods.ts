import { Meteor } from "meteor/meteor";
import { Mongo } from "meteor/mongo";
import { LandlordDocument } from "../../../database/user/models/role-models/LandlordDocument";
import { LandlordCollection } from "/app/server/database/user/user-collections";
import { MeteorMethodIdentifier } from "/app/shared/meteor-method-identifier";
import { meteorWrappedInvalidDataError } from "/app/server/utils/error-utils";
import { InvalidDataError } from "/app/server/errors/InvalidDataError";
import { ApiLandlord } from "../../../../shared/api-models/user/api-roles/ApiLandlord";
//INSERT LANDLORD
const landlordInsertMethod = {
  [MeteorMethodIdentifier.LANDLORD_INSERT]: async (
    data: Omit<LandlordDocument, "createdAt" | "_id"> // omitting both id and createdat to be generated by the db
  ): Promise<string> => {
    const newLandlord: Mongo.OptionalId<LandlordDocument> = {
      ...data,
      createdAt: new Date(),
    };

    return await LandlordCollection.insertAsync(newLandlord);
  },
};

//GET LANDLORD
// This method is used to get a landlord by its userId
// It returns a promise that resolves to an ApiLandlord object
const landlordGetMethod = {
  [MeteorMethodIdentifier.LANDLORD_GET]: async (
    userId: string
  ): Promise<ApiLandlord> => {
    const landlordDoc = await LandlordCollection.findOneAsync({ userAccountId: userId });

    if (!landlordDoc) {
      throw meteorWrappedInvalidDataError(
        new InvalidDataError(`Landlord with user ID ${userId} not found.`)
      );
    }
    return {
      landlordId: landlordDoc._id!,
      userAccountId: landlordDoc.userAccountId,
      tasks: landlordDoc.task_ids,
      firstName: landlordDoc.firstName,
      lastName: landlordDoc.lastName,
      email: landlordDoc.email,
      createdAt: landlordDoc.createdAt,
    };
  },
};

const landlordGetAllMethod = {
  [MeteorMethodIdentifier.LANDLORD_GET_ALL]: async (): Promise<ApiLandlord[]> => {
    const landlords = await LandlordCollection.find({}).fetchAsync();
    return await Promise.all(landlords.map(mapLandlordDocumentToDTO));
  },
};

async function mapLandlordDocumentToDTO(
  landlord: LandlordDocument
): Promise<ApiLandlord> {
  return {
    landlordId: landlord._id!,
    userAccountId: landlord.userAccountId,
    tasks: landlord.task_ids,
    firstName: landlord.firstName,
    lastName: landlord.lastName,
    email: landlord.email,
    createdAt: landlord.createdAt,
  };
}

Meteor.methods({
  ...landlordInsertMethod,
  ...landlordGetMethod,
  ...landlordGetAllMethod,
});
