import { Meteor } from "meteor/meteor";
import { Mongo } from "meteor/mongo";
import { LandlordDocument } from "../../../database/user/models/role-models/LandlordDocument";
import { LandlordCollection } from "/app/server/database/user/user-collections";
import { MeteorMethodIdentifier } from "/app/shared/meteor-method-identifier";
import { meteorWrappedInvalidDataError } from "/app/server/utils/error-utils";
import { InvalidDataError } from "/app/server/errors/InvalidDataError";
import { ApiLandlord } from "../../../../shared/api-models/user/api-roles/ApiLandlord";
import { TaskDocument } from "/app/server/database/task/models/TaskDocument";
import { TaskCollection } from "/app/server/database/task/task-collections";
import { ProfileCollection } from "/app/server/database/user/user-collections";

//INSERT LANDLORD
const landlordInsertMethod = {
  [MeteorMethodIdentifier.LANDLORD_INSERT]: async (
    data: Omit<LandlordDocument, "_id"> // omitting both id and createdat to be generated by the db
  ): Promise<string> => {
    const newLandlord: Mongo.OptionalId<LandlordDocument> = {
      ...data,
      createdAt: new Date(),
    };

    return await LandlordCollection.insertAsync(newLandlord);
  },
};

//GET LANDLORD
// This method is used to get a landlord by its userId
// It returns a promise that resolves to an ApiLandlord object
const landlordGetMethod = {
  [MeteorMethodIdentifier.LANDLORD_GET]: async (
    userId: string
  ): Promise<ApiLandlord> => {
    const landlordDoc = await LandlordCollection.findOneAsync({
      userAccountId: userId,
    });

    if (!landlordDoc) {
      throw meteorWrappedInvalidDataError(
        new InvalidDataError(`Landlord with user ID ${userId} not found.`)
      );
    }

    return mapLandlordDocumentToDTO(landlordDoc);
  },
};

//GET LANDLORD BY LANDLORD ID
// This method is used to get a landlord by its landlord ID (from associated property)
const landlordGetByLandlordIdMethod = {
  [MeteorMethodIdentifier.LANDLORD_GET_BY_LANDLORD_ID]: async (
    landlordId: string
  ): Promise<ApiLandlord> => {
    const landlordDoc = await LandlordCollection.findOneAsync({
      _id: landlordId,
    });

    if (!landlordDoc) {
      throw meteorWrappedInvalidDataError(
        new InvalidDataError(`Landlord with landlord ID ${landlordId} not found.`)
      );
    }

    return mapLandlordDocumentToDTO(landlordDoc);
  },
};

// -- ADD TASK TO LANDLORD --
// Single responsibility: Only adds a task to landlord's task_ids array
const landlordAddTaskMethod = {
  [MeteorMethodIdentifier.LANDLORD_ADD_TASK]: async (
    userId: string,
    taskId: string
  ): Promise<void> => {
    console.log("LANDLORD_ADD_TASK called with:", { userId, taskId });
    
    const landlordDoc = await LandlordCollection.findOneAsync({
      userAccountId: userId,
    });

    if (!landlordDoc) {
      throw meteorWrappedInvalidDataError(
        new InvalidDataError(`Landlord with user ID ${userId} not found.`)
      );
    }

    // Use $addToSet to atomically add task if not already present (prevents duplicates)
    await LandlordCollection.updateAsync(
      { _id: landlordDoc._id },
      { $addToSet: { task_ids: taskId } }
    );
    console.log("Added task to landlord:", taskId);
  },
};



const landlordGetAllMethod = {
  [MeteorMethodIdentifier.LANDLORD_GET_ALL]: async (): Promise<
    ApiLandlord[]
  > => {
    const landlords = await LandlordCollection.find({}).fetchAsync();
    return await Promise.all(landlords.map(mapLandlordDocumentToDTO));
  },
};

async function mapLandlordDocumentToDTO(
  landlord: LandlordDocument
): Promise<ApiLandlord> {
  const taskIds = landlord.task_ids ?? [];

  const taskDocuments =
    taskIds.length > 0 ? await getTaskDocumentsMatchingIds(taskIds) : [];

  return {
    landlordId: landlord._id!,
    profileDataId: landlord.profileDataId,
    userAccountId: landlord.userAccountId,
    tasks: taskDocuments.map((doc) => doc._id),
    createdAt: landlord.createdAt,
  };
}

async function getTaskDocumentsMatchingIds(
  taskIds: string[]
): Promise<TaskDocument[]> {
  return await TaskCollection.find({
    _id: { $in: taskIds },
  }).fetchAsync();
}

// Get profile data by landlord ID (queries landlord collection first, then profile collection)
const profileGetByLandlordIdMethod = {
  [MeteorMethodIdentifier.PROFILE_GET_BY_LANDLORD_ID]: async (
    landlordId: string
  ): Promise<any> => {
    // First get the landlord document to extract profileDataId
    const landlordDoc = await LandlordCollection.findOneAsync({
      _id: landlordId,
    });

    if (!landlordDoc) {
      throw meteorWrappedInvalidDataError(
        new InvalidDataError(`Landlord with ID ${landlordId} not found.`)
      );
    }

    // Then get the profile data using the profileDataId
    const profileDoc = await ProfileCollection.findOneAsync({
      _id: landlordDoc.profileDataId,
    });

    if (!profileDoc) {
      throw meteorWrappedInvalidDataError(
        new InvalidDataError(`Profile with ID ${landlordDoc.profileDataId} not found.`)
      );
    }

    return profileDoc;
  },
};

Meteor.methods({
  ...landlordInsertMethod,
  ...landlordGetMethod,
  ...landlordGetByLandlordIdMethod,
  ...landlordAddTaskMethod,
  ...landlordGetAllMethod,
  ...profileGetByLandlordIdMethod,
});
