import { Meteor } from "meteor/meteor";
import { Mongo } from "meteor/mongo";
import { TenantDocument } from "../../../database/user/models/role-models/TenantDocument";
import { TenantCollection } from "/app/server/database/user/user-collections";
import { MeteorMethodIdentifier } from "/app/shared/meteor-method-identifier";
import { ApiTenant } from "../../../../shared/api-models/user/api-roles/ApiTenant";
import { meteorWrappedInvalidDataError } from "/app/server/utils/error-utils";
import { InvalidDataError } from "/app/server/errors/InvalidDataError";
import { TaskDocument } from "/app/server/database/task/models/TaskDocument";
import { TaskCollection } from "/app/server/database/task/task-collections";
import { ProfileCollection } from "/app/server/database/user/user-collections";

// -- INSERT TENANT --
const tenantInsertMethod = {
  [MeteorMethodIdentifier.TENANT_INSERT]: async (
    data: Omit<TenantDocument,"_id"> // omitting both id and createdat to be generated by the db
  ): Promise<string> => {
    const newTenant: Mongo.OptionalId<TenantDocument> = {
      ...data,
      createdAt: new Date(),
    };

    return await TenantCollection.insertAsync(newTenant);
  },
};

const tenantGetMethod = {
  [MeteorMethodIdentifier.TENANT_GET]: async (
    userId: string
  ): Promise<ApiTenant> => {
    const tenantDoc = await TenantCollection.findOneAsync({
      userAccountId: userId,
    });

    if (!tenantDoc) {
      throw meteorWrappedInvalidDataError(
        new InvalidDataError(`Tenant with user ID ${userId} not found.`)
      );
    }

    return mapTenantDocumentToDTO(tenantDoc);
  },
};

async function mapTenantDocumentToDTO(
  tenant: TenantDocument
): Promise<ApiTenant> {
  const taskIds = tenant.task_ids ?? [];

  const taskDocuments =
    taskIds.length > 0 ? await getTaskDocumentsMatchingIds(taskIds) : [];

  return {
    tenantId: tenant._id!,
    profileDataId: tenant.profileDataId,
    userAccountId: tenant.userAccountId,
    tasks: taskDocuments.map((doc) => doc._id),
    createdAt: tenant.createdAt,
  };
}

async function getTaskDocumentsMatchingIds(
  ids: string[]
): Promise<TaskDocument[]> {
  return await TaskCollection.find({
    _id: { $in: ids },
  }).fetchAsync();
}

// Get profile data by tenant ID (queries tenant collection first, then profile collection)
const profileGetByTenantIdMethod = {
  [MeteorMethodIdentifier.PROFILE_GET_BY_TENANT_ID]: async (
    tenantId: string
  ): Promise<any> => {
    // First get the tenant document to extract profileDataId
    const tenantDoc = await TenantCollection.findOneAsync({
      _id: tenantId,
    });

    if (!tenantDoc) {
      throw meteorWrappedInvalidDataError(
        new InvalidDataError(`Tenant with ID ${tenantId} not found.`)
      );
    }

    // Then get the profile data using the profileDataId
    const profileDoc = await ProfileCollection.findOneAsync({
      _id: tenantDoc.profileDataId,
    });

    if (!profileDoc) {
      throw meteorWrappedInvalidDataError(
        new InvalidDataError(`Profile with ID ${tenantDoc.profileDataId} not found.`)
      );
    }

    return profileDoc;
  },
};

// -- ADD TASK TO TENANT --
// Single responsibility: Only adds a task to tenant's task_ids array
const tenantAddTaskMethod = {
  [MeteorMethodIdentifier.TENANT_ADD_TASK]: async (
    userId: string,
    taskId: string
  ): Promise<void> => {
    console.log("TENANT_ADD_TASK called with:", { userId, taskId });
    
    const tenantDoc = await TenantCollection.findOneAsync({
      userAccountId: userId,
    });

    if (!tenantDoc) {
      throw meteorWrappedInvalidDataError(
        new InvalidDataError(`Tenant with user ID ${userId} not found.`)
      );
    }

    // Use $addToSet to atomically add task if not already present (prevents duplicates)
    await TenantCollection.updateAsync(
      { _id: tenantDoc._id },
      { $addToSet: { task_ids: taskId } }
    );
    console.log("Added task to tenant:", taskId);
  },
};


Meteor.methods({
  ...tenantInsertMethod,
  ...tenantGetMethod,
  ...tenantAddTaskMethod,
  ...profileGetByTenantIdMethod,
});
