import { Meteor } from "meteor/meteor";
import { Mongo } from "meteor/mongo";
import { TenantDocument } from "../../../database/user/models/role-models/TenantDocument";
import { TenantCollection } from "/app/server/database/user/user-collections";
import { MeteorMethodIdentifier } from "/app/shared/meteor-method-identifier";
import { ApiTenant } from "../../../../shared/api-models/user/api-roles/ApiTenant";
import { meteorWrappedInvalidDataError } from "/app/server/utils/error-utils";
import { InvalidDataError } from "/app/server/errors/InvalidDataError";

// -- INSERT TENANT --
const tenantInsertMethod = {
  [MeteorMethodIdentifier.TENANT_INSERT]: async (
    data: Omit<TenantDocument, "createdAt" | "_id"> // omitting both id and createdat to be generated by the db
  ): Promise<string> => {
    const newTenant: Mongo.OptionalId<TenantDocument> = {
      ...data,
      task_ids: data.task_ids || [], // Ensure task_ids is initialized
      createdAt: new Date(),
    };

    return await TenantCollection.insertAsync(newTenant);
  },
};

const tenantGetMethod = {
  [MeteorMethodIdentifier.TENANT_GET]: async (
    userId: string
  ): Promise<ApiTenant> => {
    const tenantDoc = await TenantCollection.findOneAsync({
      userAccountId: userId,
    });

    if (!tenantDoc) {
      throw meteorWrappedInvalidDataError(
        new InvalidDataError(`Tenant with user ID ${userId} not found.`)
      );
    }
    return {
      tenantId: tenantDoc._id!,
      userAccountId: tenantDoc.userAccountId,
      tasks: tenantDoc.task_ids,
      firstName: tenantDoc.firstName,
      lastName: tenantDoc.lastName,
      email: tenantDoc.email,
      createdAt: tenantDoc.createdAt,
    };
  },
};


Meteor.methods({
  ...tenantInsertMethod,
  ...tenantGetMethod,
});
