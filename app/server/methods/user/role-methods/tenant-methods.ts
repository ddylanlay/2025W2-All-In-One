import { Meteor } from "meteor/meteor";
import { Mongo } from "meteor/mongo";
import { TenantDocument } from "../../../database/user/models/role-models/TenantDocument";
import { TenantCollection } from "/app/server/database/user/user-collections";
import { MeteorMethodIdentifier } from "/app/shared/meteor-method-identifier";
import { ApiTenant } from "../../../../shared/api-models/user/api-roles/ApiTenant";
import { meteorWrappedInvalidDataError } from "/app/server/utils/error-utils";
import { InvalidDataError } from "/app/server/errors/InvalidDataError";
import { TaskDocument } from "/app/server/database/task/models/TaskDocument";
import { TaskCollection } from "/app/server/database/task/task-collections";

// -- INSERT TENANT --
const tenantInsertMethod = {
  [MeteorMethodIdentifier.TENANT_INSERT]: async (
    data: Omit<TenantDocument, "createdAt" | "_id"> // omitting both id and createdat to be generated by the db
  ): Promise<string> => {
    const newTenant: Mongo.OptionalId<TenantDocument> = {
      ...data,
      createdAt: new Date(),
    };

    return await TenantCollection.insertAsync(newTenant);
  },
}

const tenantGetMethod = {
  [MeteorMethodIdentifier.TENANT_GET]: async (
    userId: string
  ): Promise<ApiTenant> => {
    const tenantDoc = await TenantCollection.findOneAsync({ userId });

    if (!tenantDoc) {
      throw meteorWrappedInvalidDataError(
        new InvalidDataError(`Tenant with user ID ${userId} not found.`)
      );
    }

    return mapTenantDocumentToDTO(tenantDoc);
  },
};

async function mapTenantDocumentToDTO(tenant: TenantDocument): Promise<ApiTenant> {

    const taskDocuments =
    await getTaskDocumentsMatchingIds(tenant.task_ids);
  
    if (
      taskDocuments.length !== tenant.task_ids.length
    ) {
      throw new InvalidDataError(
        `Missing task documents for Tenant id ${tenant._id}.`
      );
    }

  return {
    tenantId: tenant._id!,
    userAccountId: tenant.userId,
    tasks: taskDocuments.map((doc) => doc.name),
    firstName: tenant.firstName,
    lastName: tenant.lastName,
    email: tenant.email,
    createdAt: tenant.createdAt,
  };
}

async function getTaskDocumentsMatchingIds(
  ids: string[]
): Promise<TaskDocument[]> {
  return await TaskCollection.find({
    _id: { $in: ids },
  }).fetchAsync();
}

Meteor.methods({
  ...tenantInsertMethod,
  ...tenantGetMethod
});