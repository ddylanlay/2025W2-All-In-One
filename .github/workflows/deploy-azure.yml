name: Build & Push to ACR

on:
  push:
    branches: [ "main" ]   # <- adjust if needed
  workflow_dispatch:

# OIDC login needs this
permissions:
  contents: read
  id-token: write

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: allinonedev.azurecr.io
  REPOSITORY: meteor-app         # image name in ACR
  ACR_NAME: allinonedev          # ACR resource name (no .azurecr.io)
  AZ_RESOURCE_GROUP: propertymedia-dev-southeastaus-rg   # e.g., rg-allinone-prod
  APP_SERVICE_NAME: allinone-web # your Web App name
  # Set to "true" if you want the workflow to restart the web app after push
  RESTART_APP_AFTER_PUSH: "false"

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute SHORT_SHA
        run: echo "SHORT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

      # Login to Azure using OIDC (no client secret needed)
      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:  ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Log in Docker to your ACR using Azure CLI creds
      - name: ACR login
        run: az acr login -n ${ACR_NAME}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Optional: cache layers to speed repeat builds
      - name: Build & Push image to ACR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64              # App Service runs amd64
          tags: |
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:prod
            ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:prod-${{ env.SHORT_SHA }}
          # If your Dockerfile expects args (from your earlier builds)
          build-args: |
            NODE_VERSION=22.16.0
            EXACT_NODE_VERSION=true
          cache-from: type=gha
          cache-to: type=gha,mode=max

